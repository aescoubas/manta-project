# .github/workflows/ci-and-release-pr.yaml
name: CI and Release PR

env:
  CONTAINER_REGISTRY: ghcr.io  # GitHub Container Registry

on:
  push:
    branches:
      - 'main'
    paths:
      - 'crates/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
  pull_request:
    branches:
      - 'main'
    paths:
      - 'crates/**'
      - 'Cargo.toml'
      - 'Cargo.lock'

permissions:
  contents: write  # Required for creating releases, committing changes, and pushing tags
  pull-requests: write  # Required for creating/updating pull requests

jobs:
  changed_files:
    runs-on: ubuntu-latest
    name: Detect changed files
    outputs:
      manta_any_changed: ${{ steps.changed-files-yaml.outputs.manta_any_changed }}
      manta_all_changed_files: ${{ steps.changed-files-yaml.outputs.manta_all_changed_files }}
      manta_backend_dispatcher_any_changed: ${{ steps.changed-files-yaml.outputs.manta_backend_dispatcher_any_changed }}
      manta_backend_dispatcher_all_changed_files: ${{ steps.changed-files-yaml.outputs.manta_backend_dispatcher_all_changed_files }}
      manta_ws_any_changed: ${{ steps.changed-files-yaml.outputs.manta_ws_any_changed }}
      manta_ws_all_changed_files: ${{ steps.changed-files-yaml.outputs.manta_ws_all_changed_files }}
      ochami_rs_any_changed: ${{ steps.changed-files-yaml.outputs.ochami_rs_any_changed }}
      ochami_rs_all_changed_files: ${{ steps.changed-files-yaml.outputs.ochami_rs_all_changed_files }}
      csm_rs_any_changed: ${{ steps.changed-files-yaml.outputs.csm_rs_any_changed }}
      csm_rs_all_changed_files: ${{ steps.changed-files-yaml.outputs.csm_rs_all_changed_files }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0  # Required for changed-files to compare commits

      - name: Get changed files
        id: changed-files-yaml
        uses: tj-actions/changed-files@v46
        with:
          files_yaml: |
            manta:
              - crates/manta/**
            manta_backend_dispatcher:
              - crates/manta-backend-dispatcher/**
            manta_ws:
              - crates/manta-ws/**
            ochami_rs:
              - crates/ochami-rs/**
            csm_rs:
              - crates/csm-rs/**

  check_formatting:
    name: Check Rust code formatting
    needs: changed_files
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        crate:
          - name: manta
            path: crates/manta
            output_prefix: manta
          - name: manta-backend-dispatcher
            path: crates/manta-backend-dispatcher
            output_prefix: manta_backend_dispatcher
          - name: manta-ws
            path: crates/manta-ws
            output_prefix: manta_ws
          - name: ochami-rs
            path: crates/ochami-rs
            output_prefix: ochami_rs
          - name: csm-rs
            path: crates/csm-rs
            output_prefix: csm_rs
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt

      - name: Check formatting for ${{ matrix.crate.name }}
        if: ${{ needs.changed_files.outputs[format('{0}_any_changed', matrix.crate.output_prefix)] == 'true' }}
        run: |
          echo "cd ${{ matrix.crate.path }} && cargo fmt --check"

  lint:
    name: Lint Rust code with Clippy
    needs: changed_files
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        crate:
          - name: manta
            path: crates/manta
            output_prefix: manta
          - name: manta-backend-dispatcher
            path: crates/manta-backend-dispatcher
            output_prefix: manta_backend_dispatcher
          - name: manta-ws
            path: crates/manta-ws
            output_prefix: manta_ws
          - name: ochami-rs
            path: crates/ochami-rs
            output_prefix: ochami_rs
          - name: csm-rs
            path: crates/csm-rs
            output_prefix: csm_rs
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: clippy

      - name: Run Clippy for ${{ matrix.crate.name }}
        if: ${{ needs.changed_files.outputs[format('{0}_any_changed', matrix.crate.output_prefix)] == 'true' }}
        run: |
          echo "cd ${{ matrix.crate.path }} && cargo clippy -- -D warnings"

  test_crates:
    name: Test Rust crates
    needs: changed_files
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        crate:
          - name: manta
            path: crates/manta
            output_prefix: manta
          - name: manta-backend-dispatcher
            path: crates/manta-backend-dispatcher
            output_prefix: manta_backend_dispatcher
          - name: manta-ws
            path: crates/manta-ws
            output_prefix: manta_ws
          - name: ochami-rs
            path: crates/ochami-rs
            output_prefix: ochami_rs
          - name: csm-rs
            path: crates/csm-rs
            output_prefix: csm_rs
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Test ${{ matrix.crate.name }}
        if: ${{ needs.changed_files.outputs[format('{0}_any_changed', matrix.crate.output_prefix)] == 'true' }}
        run: |
          echo "cd ${{ matrix.crate.path }} && cargo test"

  build_crates:
      needs: [changed_files, check_formatting, lint, test_crates]
      runs-on: ${{ matrix.os }}
      strategy:
        fail-fast: false
        matrix:
          include:
            - name: manta
              path: crates/manta
              output_prefix: manta
              os: ubuntu-latest
            - name: manta-backend-dispatcher
              path: crates/manta-backend-dispatcher
              output_prefix: manta_backend_dispatcher
              os: ubuntu-latest
            - name: manta-ws
              path: crates/manta-ws
              output_prefix: manta_ws
              os: ubuntu-latest
            - name: ochami-rs
              path: crates/ochami-rs
              output_prefix: ochami_rs
              os: ubuntu-latest
            - name: csm-rs
              path: crates/csm-rs
              output_prefix: csm_rs
              os: ubuntu-latest
            - name: manta
              path: crates/manta
              output_prefix: manta
              os: macos-latest
              target: x86_64-apple-darwin
            - name: manta
              path: crates/manta
              output_prefix: manta
              os: macos-latest
              target: aarch64-apple-darwin
      steps:
        - uses: actions/checkout@v4
          with:
            submodules: recursive

        - name: Install Rust
          uses: dtolnay/rust-toolchain@stable
          with:
            toolchain: stable

        - name: Build
          if: ${{ needs.changed_files.outputs[format('{0}_any_changed', matrix.output_prefix)] == 'true' }}
          run: |
            cargo --version
            rustc --version
            if [[ -n "${{ matrix.target }}" ]]; then
              rustup target add ${{ matrix.target }}
            fi
            cd ${{ matrix.path }}
            if [[ -n "${{ matrix.target }}" ]]; then
              cargo build --release --target ${{ matrix.target }}
            else
              cargo build --release
            fi
            ls -R target/

        - name: Upload artifacts
          if: ${{ needs.changed_files.outputs[format('{0}_any_changed', matrix.output_prefix)] == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          uses: actions/upload-artifact@v4
          with:
            name: ${{ matrix.name }}-${{ runner.os }}${{ matrix.target && format('-{0}', matrix.target) || '' }}-binary
            path: ${{ matrix.path }}/target/${{ matrix.target && format('{0}/', matrix.target) || '' }}release/${{ matrix.name }}

  release_pr:
    needs: changed_files
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        crate:
          - name: manta
            path: crates/manta
            output_prefix: manta
            tag_prefix: manta-
          - name: manta-backend-dispatcher
            path: crates/manta-backend-dispatcher
            output_prefix: manta_backend_dispatcher
            tag_prefix: manta-backend-dispatcher-
          - name: manta-ws
            path: crates/manta-ws
            output_prefix: manta_ws
            tag_prefix: manta-ws-
          - name: ochami-rs
            path: crates/ochami-rs
            output_prefix: ochami_rs
            tag_prefix: ochami-rs-
          - name: csm-rs
            path: crates/csm-rs
            output_prefix: csm_rs
            tag_prefix: csm-rs-
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GH_RELEASE_TOKEN }}

      - name: Install Rust
        if: ${{ needs.changed_files.outputs[format('{0}_any_changed', matrix.crate.output_prefix)] == 'true' }}
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Install release-plz
        if: ${{ needs.changed_files.outputs[format('{0}_any_changed', matrix.crate.output_prefix)] == 'true' }}
        run: |
          mkdir -p ~/.cargo/bin
          curl -L https://github.com/MarcoIeni/release-plz/releases/latest/download/release-plz-x86_64-unknown-linux-gnu.tar.gz -o ~/.cargo/bin/release-plz.tar.gz
          tar -xzf ~/.cargo/bin/release-plz.tar.gz -C ~/.cargo/bin/
          echo "~/.cargo/bin" >> $GITHUB_PATH

      - name: Run release-plz release-pr
        if: ${{ needs.changed_files.outputs[format('{0}_any_changed', matrix.crate.output_prefix)] == 'true' }}
        run: cd ${{ matrix.crate.path }} && release-plz release-pr --backend github --git-token $GITHUB_TOKEN --config ../../release-plz.toml
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}
