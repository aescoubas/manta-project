name: Test and Build Crates

on:
  push:
    branches:
      - '**'  # Run on all branches
    paths:
      - 'crates/**'  # Trigger on changes in crates directory
      - 'Cargo.toml'  # Trigger on workspace Cargo.toml changes
      - 'Cargo.lock'  # Trigger on lockfile changes
  pull_request:
    branches:
      - '**'
    paths:
      - 'crates/**'
      - 'Cargo.toml'
      - 'Cargo.lock'

permissions:
  contents: read  # Required for checking out code
  pull-requests: write  # Optional, for commenting on PRs if needed

env:
  CARGO_TERM_COLOR: always  # Enable colored output for Cargo

jobs:
  detect-changed-crates:
    runs-on: ubuntu-latest
    outputs:
      crates: ${{ steps.set-crates.outputs.crates }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for accurate diff

      - name: Identify changed files
        id: changed-files
        uses: tj-actions/changed-files@v45
        with:
          files: |
            csm-rs:
              - crates/csm-rs/**
            manta-ws:
              - crates/manta-ws/**
            manta-backend-dispatcher:
              - crates/manta-backend-dispatcher/**
            manta:
              - crates/manta/**
            ochami-rs:
              - crates/ochami_rs/**


        # translate the above into a single modified crate ?
        #if: steps.changed-files-yaml.outputs.csm_rs_any_changed == 'true'  
        run: |
          CHANGED_CRATES=""
          # List all crates as a space-separated string
          for crate in csm_rs manta manta_backend_dispatcher manta_ws ochami_rs; do
            # Check if any file in the crate's directory or workspace files changed
              var_name="${crate}_changed_files"
              #echo $var_name
              #echo ${!var_name}
              if [[ "${!var_name}" == "true" ]]; then
                  echo "$var_name is true"
              # Append crate name to the string (space-separated)
              if [ -z "$CHANGED_CRATES" ]; then
                  CHANGED_CRATES="$(echo $crate | tr '_' '-')"
              else
                CHANGED_CRATES="$CHANGED_CRATES $(echo $crate | tr '_' '-')"
              fi
            fi
          done

          # Convert space-separated crate names to JSON array
          if [ -z "$CHANGED_CRATES" ]; then
          echo "crates=[]" >> $GITHUB_OUTPUT
          #echo "crates=[]" 
          else
          # Convert space-separated string to JSON array using jq
          CRATES_JSON=$(echo "$CHANGED_CRATES" | tr ' ' '\n' | jq -R . | jq -s .)
          echo "crates=$CRATES_JSON" >> $GITHUB_OUTPUT
          #echo "crates=$CRATES_JSON"
          fi


  test-and-build:
    runs-on: ubuntu-latest
    needs: detect-changed-crates
    if: needs.detect-changed-crates.outputs.crates != '[]'  # Only run if crates changed
    strategy:
      matrix:
        crate: ${{ fromJson(needs.detect-changed-crates.outputs.crates) }}
      fail-fast: false  # Continue testing other crates if one fails
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run tests for ${{ matrix.crate }}
        run: |
          cargo test --package ${{ matrix.crate }} --all-features
        working-directory: .

      - name: Build crate ${{ matrix.crate }}
        run: |
          cargo build --package ${{ matrix.crate }} --release
        working-directory: .
