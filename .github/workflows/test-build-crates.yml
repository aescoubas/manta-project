name: Check changed files and release

env:
  CONTAINER_REGISTRY: ghcr.io  # GitHub Container Registry

on:
  push:
    branches:
      - 'main'
      - 'staging'
    paths:
      - 'crates/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
  pull_request:
    branches:
      - 'staging'
      - 'main'
    paths:
      - 'crates/**'
      - 'Cargo.toml'
      - 'Cargo.lock'

permissions:
  contents: write  # Required for creating releases, committing changes, and pushing tags
  pull-requests: write  # Required for creating/updating pull requests

jobs:
  changed_files:
    runs-on: ubuntu-latest
    name: Detect changed files
    outputs:
      manta_any_changed: ${{ steps.changed-files-yaml.outputs.manta_any_changed }}
      manta_all_changed_files: ${{ steps.changed-files-yaml.outputs.manta_all_changed_files }}
      manta_backend_dispatcher_any_changed: ${{ steps.changed-files-yaml.outputs.manta_backend_dispatcher_any_changed }}
      manta_backend_dispatcher_all_changed_files: ${{ steps.changed-files-yaml.outputs.manta_backend_dispatcher_all_changed_files }}
      manta_ws_any_changed: ${{ steps.changed-files-yaml.outputs.manta_ws_any_changed }}
      manta_ws_all_changed_files: ${{ steps.changed-files-yaml.outputs.manta_ws_all_changed_files }}
      ochami_rs_any_changed: ${{ steps.changed-files-yaml.outputs.ochami_rs_any_changed }}
      ochami_rs_all_changed_files: ${{ steps.changed-files-yaml.outputs.ochami_rs_all_changed_files }}
      csm_rs_any_changed: ${{ steps.changed-files-yaml.outputs.csm_rs_any_changed }}
      csm_rs_all_changed_files: ${{ steps.changed-files-yaml.outputs.csm_rs_all_changed_files }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0  # Required for changed-files to compare commits

      - name: Get changed files
        id: changed-files-yaml
        uses: tj-actions/changed-files@v46
        with:
          files_yaml: |
            manta:
              - crates/manta/**
            manta_backend_dispatcher:
              - crates/manta-backend-dispatcher/**
            manta_ws:
              - crates/manta-ws/**
            ochami_rs:
              - crates/ochami-rs/**
            csm_rs:
              - crates/csm-rs/**

  check_formatting:
    name: Check Rust code formatting
    needs: changed_files
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        crate:
          - name: manta
            path: crates/manta
            output_prefix: manta
          - name: manta-backend-dispatcher
            path: crates/manta-backend-dispatcher
            output_prefix: manta_backend_dispatcher
          - name: manta-ws
            path: crates/manta-ws
            output_prefix: manta_ws
          - name: ochami-rs
            path: crates/ochami-rs
            output_prefix: ochami_rs
          - name: csm-rs
            path: crates/csm-rs
            output_prefix: csm_rs
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt

      - name: Check formatting for ${{ matrix.crate.name }}
        if: ${{ needs.changed_files.outputs[format('{0}_any_changed', matrix.crate.output_prefix)] == 'true' }}
        run: |
          echo "cd ${{ matrix.crate.path }} && cargo fmt --check"

  lint:
    name: Lint Rust code with Clippy
    needs: changed_files
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        crate:
          - name: manta
            path: crates/manta
            output_prefix: manta
          - name: manta-backend-dispatcher
            path: crates/manta-backend-dispatcher
            output_prefix: manta_backend_dispatcher
          - name: manta-ws
            path: crates/manta-ws
            output_prefix: manta_ws
          - name: ochami-rs
            path: crates/ochami-rs
            output_prefix: ochami_rs
          - name: csm-rs
            path: crates/csm-rs
            output_prefix: csm_rs
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: clippy

      - name: Run Clippy for ${{ matrix.crate.name }}
        if: ${{ needs.changed_files.outputs[format('{0}_any_changed', matrix.crate.output_prefix)] == 'true' }}
        run: |
          echo "cd ${{ matrix.crate.path }} && cargo clippy -- -D warnings"

  test_crates:
    name: Test Rust crates
    needs: changed_files
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        crate:
          - name: manta
            path: crates/manta
            output_prefix: manta
          - name: manta-backend-dispatcher
            path: crates/manta-backend-dispatcher
            output_prefix: manta_backend_dispatcher
          - name: manta-ws
            path: crates/manta-ws
            output_prefix: manta_ws
          - name: ochami-rs
            path: crates/ochami-rs
            output_prefix: ochami_rs
          - name: csm-rs
            path: crates/csm-rs
            output_prefix: csm_rs
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Test ${{ matrix.crate.name }}
        if: ${{ needs.changed_files.outputs[format('{0}_any_changed', matrix.crate.output_prefix)] == 'true' }}
        run: |
          echo "cd ${{ matrix.crate.path }} && cargo test"

  build_crates:
    needs: [changed_files, check_formatting, lint, test_crates]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        crate:
          - name: manta
            path: crates/manta
            output_prefix: manta
          - name: manta-backend-dispatcher
            path: crates/manta-backend-dispatcher
            output_prefix: manta_backend_dispatcher
          - name: manta-ws
            path: crates/manta-ws
            output_prefix: manta_ws
          - name: ochami-rs
            path: crates/ochami-rs
            output_prefix: ochami_rs
          - name: csm-rs
            path: crates/csm-rs
            output_prefix: csm_rs
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Build ${{ matrix.crate.name }}
        if: ${{ needs.changed_files.outputs[format('{0}_any_changed', matrix.crate.output_prefix)] == 'true' }}
        run: |
          cargo --version
          rustc --version
          cd ${{ matrix.crate.path }} 
          cargo build --locked --manifest-path Cargo.toml --release

      - name: Upload artifacts
        if: ${{ needs.changed_files.outputs[format('{0}_any_changed', matrix.crate.output_prefix)] == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.crate.name }}-binary
          path: ${{ matrix.crate.path }}/target/release/${{ matrix.crate.name }}

  release_pr:
    needs: [changed_files, build_crates]
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install release-plz
        run: cargo install release-plz --locked

      - name: Run release-plz release-pr
        run: release-plz release-pr --base-branch main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    needs: [changed_files, build_crates]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install release-plz
        run: cargo install release-plz --locked

      - name: Run release-plz release
        run: release-plz release --forge github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  attach_assets:
    needs: [changed_files, release]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        crate:
          - name: manta
            path: crates/manta
            output_prefix: manta
            tag_prefix: manta-
          - name: manta-backend-dispatcher
            path: crates/manta-backend-dispatcher
            output_prefix: manta_backend_dispatcher
            tag_prefix: manta-backend-dispatcher-
          - name: manta-ws
            path: crates/manta-ws
            output_prefix: manta_ws
            tag_prefix: manta-ws-
          - name: ochami-rs
            path: crates/ochami-rs
            output_prefix: ochami_rs
            tag_prefix: ochami-rs-
          - name: csm-rs
            path: crates/csm-rs
            output_prefix: csm_rs
            tag_prefix: csm-rs-
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Get version
        id: get_version
        run: |
          cd ${{ matrix.crate.path }}
          VERSION=$(grep '^version =' Cargo.toml | head -n1 | cut -d '"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set tag
        id: set_tag
        run: echo "tag=${{ matrix.crate.tag_prefix }}v${{ steps.get_version.outputs.version }}" >> $GITHUB_OUTPUT

      - name: Download artifact for ${{ matrix.crate.name }}
        if: ${{ needs.changed_files.outputs[format('{0}_any_changed', matrix.crate.output_prefix)] == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.crate.name }}-binary
          path: artifacts/

      - name: Attach binary to release for ${{ matrix.crate.name }}
        if: ${{ needs.changed_files.outputs[format('{0}_any_changed', matrix.crate.output_prefix)] == 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.set_tag.outputs.tag }}
          files: |
            artifacts/${{ matrix.crate.name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_publish_container_image:
    needs: [changed_files, release]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.changed_files.outputs.manta_ws_any_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Check Podman version
        run: podman version

      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | podman login ${{ env.CONTAINER_REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Get version for manta-ws
        id: get_version
        run: |
          cd crates/manta-ws
          VERSION=$(grep '^version =' Cargo.toml | head -n1 | cut -d '"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set tag
        id: set_tag
        run: echo "tag=manta-ws-v${{ steps.get_version.outputs.version }}" >> $GITHUB_OUTPUT

      - name: Podman build for manta-ws
        run: |
          cd crates/manta-ws
          podman build -t ${{ env.CONTAINER_REGISTRY }}/${{ github.repository_owner }}/manta-ws:${{ steps.set_tag.outputs.tag }} .
          podman push ${{ env.CONTAINER_REGISTRY }}/${{ github.repository_owner }}/manta-ws:${{ steps.set_tag.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
